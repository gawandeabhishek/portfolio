/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: akshatmittal (https://sketchfab.com/akshatmittal)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/2021-macbook-pro-14-m1-pro-m1-max-f6b0b940fb6a4286b18a674ef32af2d3
Title: 2021 Macbook Pro 14" (M1 Pro / M1 Max)
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";

import mackbookScene from "../assets/3d/macbook.glb";

const Macbook = ({ isRotating, setIsRotating, ...props }) => {
  const macbookRef = useRef();

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(mackbookScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      const delta = (clientX - lastX.current) / viewport.width;

      macbookRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) {
        setIsRotating(true);
      }
      macbookRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) {
        setIsRotating(true);
      }
      macbookRef.current.rotation.y += 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      isRotating(false);
    }
  };

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) <= 0.001) {
        rotationSpeed.current = 0;
      }

      macbookRef.current.rotation.y += 2 * rotationSpeed.current;
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={macbookRef} fallback={null} {...props}>
      <group scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.abgVijaHVNRUvcc.geometry}
          material={materials.UpOvKwLUUXPmnPU}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CEvArJuvvmtQsgk.geometry}
          material={materials.yVmFXNTCIwNkqVT}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.aUVveCqqwsqchVB.geometry}
          material={materials.yVmFXNTCIwNkqVT}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.fiqlelggeOoTUAw.geometry}
          material={materials.SELuppcPLrlTpBi}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.zlRXoydEgBQgFUa.geometry}
          material={materials.zqeFZcIteZtOShc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.YvEVHGlTGUxXlGj.geometry}
          material={materials.initialShadingGroup}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.FnbkdmFKVeCCxTX.geometry}
          material={materials.ZpTrUizuxJQUyzW}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ehiyYGFzDbgxhiD.geometry}
          material={materials.LJSCtLIrHNHZnIH}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.NhThIZELXlNUoIr.geometry}
          material={materials.mpJhsaJJZPPWMEX}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.RYgQzNzcnFbacQH.geometry}
          material={materials.VfcxYmbOfnqunYx}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.JtnJKXAEPaOoepM.geometry}
          material={materials.lbGSuJJwEsUTzIm}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.WeTEPJkcTkMBwBo.geometry}
          material={materials.lbGSuJJwEsUTzIm}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.yxTDdMZViYkuOKm.geometry}
          material={materials.BczvixNfkWQzRzZ}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.pPCeNYAcgHQGnfB.geometry}
          material={materials.jRMWtdSAaujlvUA}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CpRxqsFibJhVZKA.geometry}
          material={materials.CGiumILqqSMVyeb}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.UxiDBlCRfXiMBzT.geometry}
          material={materials.zWLcvvnJhbcTEtJ}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.NgmQYtxXWDmCavo.geometry}
          material={materials.SKOFticEGTqECbB}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.PSIiVLWbMOjTmDb.geometry}
          material={materials.SKOFticEGTqECbB}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.RkSurqpnfNMQZfv.geometry}
          material={materials.zWLcvvnJhbcTEtJ}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.YJMoQnvBNpTrgeH.geometry}
          material={materials.PCfVLhSpFVCvRmc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.KCEhahuknsxQOxv.geometry}
          material={materials.HpEeGHRuOqfcIZU}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.tEHnKyDsqJuxIpz.geometry}
          material={materials.yVmFXNTCIwNkqVT}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.TCGsaoyNbPKzeSS.geometry}
          material={materials.yVmFXNTCIwNkqVT}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.DAuseNOrQKyrxKl.geometry}
          material={materials.yVmFXNTCIwNkqVT}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.SjXIFRJFXEqYDUr.geometry}
          material={materials.PCfVLhSpFVCvRmc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.eAcvqfZlEdoxHsj.geometry}
          material={materials.IlNnjEDxsExlBOr}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.gkxaPoMYYRpyVMR.geometry}
          material={materials.iPZiEncThgnBMJv}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.xlRLalLTesirCGW.geometry}
          material={materials.hPcehRUjcLAosED}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ZlizOzukFeXwbga.geometry}
          material={materials.kOcboIDeohDRqCf}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.wXiLpiodZWNDroe.geometry}
          material={materials.HPAOpCInJKBtaOC}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.PTxrSKzcEmHVtif.geometry}
          material={materials.VfcxYmbOfnqunYx}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.RjGOdbHqvxkiDns.geometry}
          material={materials.lbGSuJJwEsUTzIm}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.WPFmzKypKbUYgQT.geometry}
          material={materials.lbGSuJJwEsUTzIm}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.QHqPxKdexBoFnAK.geometry}
          material={materials.zaEqorbaeeADKgU}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.NWErafhynAfYQEz.geometry}
          material={materials.pZbDFXVUkfRwjmQ}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.tEwRkclpxjXZzil.geometry}
          material={materials.UPMcPXFSRXevSGt}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.QYMcPaZnXQfyXcJ.geometry}
          material={materials.NQXltfOcKPZPQdI}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.piXptsgcOfaGWrM.geometry}
          material={materials.WLATjirhQCUYAAG}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.SjSNuZdtWKZRuoq.geometry}
          material={materials.mpJhsaJJZPPWMEX}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.QFFLzaWPRnuQYJR.geometry}
          material={materials.hPcehRUjcLAosED}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.xjTvBwZFGvSMOud.geometry}
          material={materials.hPcehRUjcLAosED}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.VqfccLWHjnpnmIO.geometry}
          material={materials.BMKLbAPYqPmfArt}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.mUrIWHenIQKVHcb.geometry}
          material={materials.BMKLbAPYqPmfArt}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.NdRhLFCrSxRNTxn.geometry}
          material={materials.BMKLbAPYqPmfArt}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.vivXPkdlqllUnrl.geometry}
          material={materials.XNDkEZQapqqDHpk}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.rIsAbujsARaHSub.geometry}
          material={materials.jAWKNAaRBMlZYro}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.QMBrsnrwfcVKELm.geometry}
          material={materials.VqwNZwmDotIMflD}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.NqLxSKdAypgOdPC.geometry}
          material={materials.initialShadingGroup}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.guoofBSjCEiTIJr.geometry}
          material={materials.JjuwNKnMBUdtRLb}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.jvyJQHpRnZNPEYh.geometry}
          material={materials.LJSCtLIrHNHZnIH}
        />
      </group>
    </a.group>
  );
};

export default Macbook;
